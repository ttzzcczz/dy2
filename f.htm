<!DOCTYPE html>
<html lang="en">
<head>
<meta name="robots" content="noindex" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="language" content="en" />
<meta name="description" content="Download your favorite YouTube videos and playlists from the internet without registration for free. Convert your favorite YouTube videos to MP3, MP4 and M4A." />
<meta name="google" content="notranslate" />
<title>Widget API</title>
<link rel="stylesheet" href="./widget.css" />
<script>
        const countryCodeExpression = /loc=([\w]{2})/;
        const userIPExpression = /ip=([\w\.]+)/;
        var user_country;
    </script>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-149443495-1"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/4.3.9/iframeResizer.contentWindow.js" integrity="sha512-hBWsS94l8+snzSPo759jDKZ3z3jn3WT4snJZTBaeMPbrCGzDrYdl2pN9EaXjh6IqEZC7wF10qcmp42TPRVgAYQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
        window.dataLayer = window.dataLayer || [];

        function gtag() {
            dataLayer.push(arguments);
        }
        gtag("js", new Date());
        gtag("config", "UA-149443495-1");
    </script>
</head>
<body>
<div class="widget-wrapper">
<div class="widget-input">
<form id="urlForm">
<input type="text" class="widget-input-url" placeholder="Paste Your URL Here" id="urlInput" required />
</form>
<label class="widget-input-quality">
<select></select>
</label>
<button class="widget-input-download" id="mainDownloadBtn">
<div class="loader" id="mainLoader"></div>
<span id="buttonMainContent">Download <span class="quality">MP4 (720p)</span></span>
</button>
</div>
<div class="widget-card">
<ul class="widget-card-list" style="display: block">
</ul>
</div>
</div>
</body>
<script>
    // Select functionality
    const selectEl = document.querySelector(".widget-input-quality select");
    const widgetCardList = document.querySelector(".widget-card-list");
    const mainDownloadBtn = document.getElementById("mainDownloadBtn");

    // Render options for select dropdown
    const optionsRender = () => {
        const options = [
            {
                key: "mp3",
                label: "MP3",
                quality: "",
            },
            {
                key: "m4a",
                label: "M4A",
                quality: "",
            },
            {
                key: "360",
                label: "MP4",
                quality: "360p",
            },
            {
                key: "480",
                label: "MP4",
                quality: "480p",
            },
            {
                key: "720",
                label: "MP4",
                quality: "720p",
            },
            {
                key: "1080",
                label: "MP4",
                quality: "1080p",
            },
            {
                key: "4k",
                label: "MP4",
                quality: "4K",
            },
            {
                key: "8k",
                label: "MP4",
                quality: "8K",
            },
            {
                key: "webm_audio",
                label: "WEBM",
                quality: "Audio",
            },
            {
                key: "aac",
                label: "AAC",
                quality: "",
            },
            {
                key: "flac",
                label: "FLAC",
                quality: "",
            },
            {
                key: "ogg",
                label: "OGG",
                quality: "",
            },
            {
                key: "opus",
                label: "OPUS",
                quality: "",
            },
            {
                key: "wav",
                label: "WAV",
                quality: "",
            },
        ];

        const optionsHTML = options
            .map(
                (option) => `
        <option value="${option.key}">${option.label} ${option.quality ? `(${option.quality})` : ""
                    }</option>
  `
            )
            .join("");
        selectEl.innerHTML = optionsHTML;
        selectEl.value = "720";
    };
    optionsRender();

    selectEl.addEventListener("change", (e) => {
        const selectedOptionLabel = e.target.options[e.target.selectedIndex].text;
        const qualitySpan = document.querySelector(
            ".widget-input-download .quality"
        );
        qualitySpan.innerHTML = selectedOptionLabel;
    });

    const urlForm = document.getElementById("urlForm");
    let url = [];

    const setMainButtonLoading = (is_loading) => {
        const loader = mainDownloadBtn.querySelector("#mainLoader");
        const message = mainDownloadBtn.querySelector("#buttonMainContent");
        if (is_loading == true) {
            loader.style.display = "block";
            message.style.display = "none";
        } else {
            loader.style.display = "none";
            message.style.display = "block";
        }
    };

    let currentIndex = 0;

    const onSubmitUrl = (e) => {
        e.preventDefault();
        const urlInput = document.getElementById("urlInput");
        url.push(urlInput.value);
        setMainButtonLoading(true);
        getVideoData(urlInput.value.trim())
            .then((res) => {
                setMainButtonLoading(false);
                const cardContent = `
          <li class="widget-card-item">
            <div class="card-wrapper">
              <div class="card-main-content">
                <div class="card-image" id="cardThumbnail" style="background-image: url(${res.thumbnail_url})"></div>
                <div class="card-content">
                  <div class="card-content-title" id="cardTitle">
                   ${res.title}
                  </div>
                  <div class="card-content-url" id="cardUrl">
                      ${res.url}
                  </div>
                </div>
              </div>
              <div class="card-content-button">
                <a class="download-button" data-url="${urlInput.value}" data-quality="${selectEl.value}" data-index="${currentIndex}">
                  <div class="download-button-progress"></div>
                  <svg
                    width="20"
                    height="23"
                    viewBox="0 0 20 23"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    id="downloadSvg"
                    style="z-index: 4; display: none"
                  >
                    <path
                      d="M6.66663 18.0003H13.3333C15.6903 18.0003 16.8688 18.0003 17.601 17.2681C18.3333 16.5359 18.3333 15.3573 18.3333 13.0003V12.167C18.3333 9.81 18.3333 8.6315 17.601 7.89925C16.9607 7.25892 15.9791 7.17855 14.1666 7.16846M5.83329 7.16846C4.02077 7.17855 3.03918 7.25892 2.39886 7.89924C1.66663 8.6315 1.66663 9.81 1.66663 12.167V13.0003C1.66663 15.3573 1.66663 16.5359 2.39886 17.2681C2.64869 17.5179 2.95048 17.6825 3.33329 17.791"
                      stroke="white"
                      stroke-width="1.5"
                      stroke-linecap="round"
                    />
                    <path
                      d="M9.99988 1.3335V12.1668M9.99988 12.1668L7.49988 9.25016M9.99988 12.1668L12.4999 9.25016"
                      stroke="white"
                      stroke-width="1.5"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                  <svg
                    id="errorSvg"
                    width="23"
                    height="22"
                    viewBox="0 0 23 22"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    style="z-index: 4; display: none"
                  >
                    <path
                      fill-rule="evenodd"
                      clip-rule="evenodd"
                      d="M11.5 19C16.4707 19 20.5 14.9707 20.5 10C20.5 5.0293 16.4707 1 11.5 1C6.5293 1 2.5 5.0293 2.5 10C2.5 14.9707 6.5293 19 11.5 19ZM10.15 14.4919C10.15 13.7116 10.7431 13.15 11.4919 13.15C12.2569 13.15 12.85 13.7116 12.85 14.4919C12.85 15.2722 12.2569 15.85 11.4919 15.85C10.7431 15.85 10.15 15.2722 10.15 14.4919ZM10.7548 4.6C10.6941 4.60006 10.634 4.61241 10.5782 4.63631C10.5223 4.66021 10.4719 4.69515 10.43 4.73905C10.388 4.78294 10.3554 4.83487 10.334 4.89172C10.3127 4.94856 10.303 5.00914 10.3057 5.0698L10.5811 11.3698C10.5862 11.4857 10.6359 11.5951 10.7197 11.6753C10.8035 11.7554 10.9151 11.8001 11.0311 11.8H11.9698C12.0858 11.8001 12.1974 11.7554 12.2812 11.6753C12.365 11.5951 12.4147 11.4857 12.4198 11.3698L12.6943 5.0698C12.697 5.00906 12.6873 4.94841 12.6659 4.89151C12.6445 4.8346 12.6118 4.78263 12.5697 4.73872C12.5277 4.69482 12.4771 4.65989 12.4212 4.63605C12.3653 4.6122 12.3051 4.59994 12.2443 4.6H10.7548Z"
                      fill="#FF7D7E"
                    />
                  </svg>
                  <span class="loader" style="display: none"></span>
                  <span class="message" id="message">Download</span>
                </a>
              </div>
            </div>
          </li>
  `;
                widgetCardList.insertAdjacentHTML("afterbegin", cardContent);
                gtag("event", "dl", {
                    event_category: "dl",
                    event_label: "dl_button",
                });
                getDownloadUrl(urlInput.value.trim())
                    .then((res) => {
                        setStatus(currentIndex, "downloading");
                        setupRepeater(res.id, 750, currentIndex);
                        currentIndex = currentIndex + 1;
                    })
                    .catch((err) => {
                        console.log(err);
                    });
            })
            .then(() => {
                urlInput.value = "";
            })
            .catch((err) => {
                console.log(err);
            });
        widgetCardList.style.display = "block";
    };

    mainDownloadBtn.addEventListener("click", onSubmitUrl);

    urlForm.addEventListener("submit", onSubmitUrl);

    const handleItemDownloadClick = (button) => {
        console.log(button);
    };

    const getVideoData = async (url) => {
        try {
            const response = await fetch("https://noembed.com/embed?url=" + url);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            return data;
        } catch (error) {
            console.error(
                "There was a problem with the fetch operation: " + error.message
            );
        }
    };

    const getDownloadUrl = async (url) => {
        if (location.ancestorOrigins) {
            for (let i = 0; i < location.ancestorOrigins.length; i++) {
                let origin = location.ancestorOrigins.item(i);
                getOrigin(origin);
            }
        }
        try {
            if (
                location.ancestorOrigins.item(0).includes("gudanglagu456") == true ||
                location.ancestorOrigins.item(0).includes("gudanglagu321") == true ||
                location.ancestorOrigins.item(0).includes("lagu.club") == true ||
                location.ancestorOrigins.item(0).includes("carriethemusical") ==
                true ||
                location.ancestorOrigins.item(0).includes("cafelagu.me") == true ||
                location.ancestorOrigins.item(0).includes("ytmp3id.net") == true ||
                location.ancestorOrigins.item(0).includes("mp3clip") == true ||
                location.ancestorOrigins.item(0).includes("mp3clip") == true ||
                location.ancestorOrigins.item(0).includes("downloadlagu-321") ==
                true ||
                location.ancestorOrigins.item(1).includes("downloadlagu-321") ==
                true ||
                location.ancestorOrigins.item(1).includes("gudanglagu456") == true ||
                location.ancestorOrigins.item(1).includes("downloadlagu.app") ==
                true ||
                location.ancestorOrigins.item(0).includes("downloadlagu.app") ==
                true ||
                location.ancestorOrigins.item(1).includes("metrolagu.site") == true ||
                location.ancestorOrigins.item(0).includes("metrolagu.site") == true ||
                location.ancestorOrigins.item(0).includes("lagu456.wapqaw.com") ==
                true
            ) {
                return;
            }
        } catch (error) { }

        format = selectEl.value ? selectEl.value : f;
        start = 1;
        end = 1;

        try {
            const response = await fetch(
                "https://ab.cococococ.com/ajax/download.php?button=1&start=" +
                start +
                "&end=" +
                end +
                "&format=" +
                format +
                "&url=" +
                encodeURIComponent(url)
            );
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            return data;
        } catch (error) {
            console.error(
                "There was a problem with the fetch operation: " + error.message
            );
        }
    };

    const downloadRepeater = async (id) => {
        try {
            const response = await fetch(
                "https://p.oceansaver.in/ajax/progress.php?id=" + id
            );
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            return data;
        } catch (error) {
            console.error(
                "There was a problem with the fetch operation: " + error.message
            );
        }
    };

    const setupRepeater = (id, timeout_duration, button_index) => {
        downloadRepeater(id)
            .then((res) => {
                setStatus(button_index, "downloading");
                setProgress(button_index, res.progress / 10);
                if (res.success == 1 && res.download_url != null) {
                    setStatus(button_index, "success");
                    setDownloadLinkToButton(button_index, "download", res.download_url);
                    const currentUrl = new URL(location.href);
                    if (currentUrl.searchParams.get("linkUrl") != null) {
                        if (Math.random() < 0.5) {
                            setDownloadLinkToButton(
                                button_index,
                                "open",
                                "https://loader.to/ajax/ad/b.php"
                            );
                        } else {
                            setDownloadLinkToButton(
                                button_index,
                                "open",
                                "'" + location.href.searchParams.get("linkUrl") + "'"
                            );
                        }
                    } else {
                        setDownloadLinkToButton(
                            button_index,
                            "open",
                            "https://loader.to/ajax/ad/b.php"
                        );
                    }
                    return;
                } else if (res.success == 1 && res.download_url == null) {
                    setStatus(button_index, "error");
                    return;
                } else {
                    setTimeout(() => {
                        setupRepeater(id, timeout_duration, button_index);
                    }, timeout_duration);
                }
            })
            .catch((err) => {
                console.log(err);
                setStatus(button_index, "error");
            });
    };

    const getOrigin = async (origin) => {
        try {
            const response = await fetch(
                "https://loader.to/ajax/button_origin.php?origin=" + origin
            );
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            return data;
        } catch (error) {
            console.error(
                "There was a problem with the fetch operation: " + error.message
            );
        }
    };

    const setProgress = (button_index, progress) => {
        const currentButton = document.querySelector(
            `.download-button[data-index='${button_index}']`
        );
        const progressEl = currentButton.querySelector(
            ".download-button-progress"
        );
        progressEl.style.width = `${progress}%`;
    };

    const setStatus = (button_index, status) => {
        const currentButton = document.querySelector(
            `.download-button[data-index='${button_index}']`
        );
        const messageEl = currentButton.querySelector("#message");
        const loader = currentButton.querySelector(".loader");
        const errorSvg = currentButton.querySelector("#errorSvg");
        const downloadSvg = currentButton.querySelector("#downloadSvg");
        errorSvg.style.display = "none";
        downloadSvg.style.display = "none";
        loader.style.display = "none";
        currentButton.classList.remove("error");
        if (status == "error") {
            currentButton.classList.add("error");
            messageEl.innerHTML = "Error";
            errorSvg.style.display = "block";
        } else if (status == "success") {
            messageEl.innerHTML = "Download";
            downloadSvg.style.display = "block";
        } else if (status == "downloading") {
            messageEl.innerHTML = "Downloading";
            loader.style.display = "block";
        }
    };

    const setDownloadLinkToButton = (button_index, type, url) => {
        const currentButton = document.querySelector(
            `.download-button[data-index='${button_index}']`
        );
        if (type == "download") {
            currentButton.setAttribute("href", url);
        } else if (type == "open") {
            currentButton.addEventListener("click", () => {
                window.open(url, "_blank");
            });
        }
    };
</script>
<style>
    @import url("https://fonts.googleapis.com/css2?family=League+Spartan:wght@100..900&display=swap");

    body {
        min-height: 100vh;
        margin: 0;
        padding: 0;
    }

    * {
        font-family: "League Spartan", sans-serif;
        box-sizing: border-box;
    }

    .widget-wrapper {
        width: 100%;
        height: 404px;
        background: #121316;
        border: 1px solid #191a1d;
    }

    .widget-input-url {
        background: #191a1d;
        border: none;
        outline: none;
        padding: 15px;
        color: #f5f6fa;
        font-size: 12px;
        font-weight: 400;
        line-height: 14px;
        letter-spacing: 0px;
        border: 1px solid #1f2023;
        border-radius: 12px;
        box-shadow: 0px 7px 8px 0px rgba(11, 11, 14, 0.6);
        width: 100%;
    }

    .widget-input-quality {
        width: -moz-fit-content;
        width: fit-content;
        height: -moz-fit-content;
        height: fit-content;
        position: relative;
    }

    .widget-input-quality select {
        width: 100%;
        margin-top: 14px;
        padding: 15px;
        color: #f5f6fa;
        font-size: 12px;
        font-weight: 400;
        line-height: 14px;
        letter-spacing: 0px;
        border: 1px solid #1f2023;
        border-radius: 12px;
        box-shadow: 0px 7px 8px 0px rgba(11, 11, 14, 0.6);
        background: #191a1d;
        border: none;
        outline: none;
        -moz-appearance: none;
        /* Firefox */
        -webkit-appearance: none;
        /* Safari and Chrome */
        appearance: none;
        background-image: url('data:image/svg+xml,<svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg"><rect width="22" height="22" rx="6" fill="%2328292C"/><path d="M8.20215 10L11.2021 13L14.2021 10" stroke="%23F5F6FA" stroke-linecap="round"/></svg>');
        background-repeat: no-repeat;
        background-position-x: calc(100% - 7px);
        background-position-y: center;
        cursor: pointer;
    }

    .widget-input-download {
        margin-top: 20px;
        text-decoration: none;
        width: 100%;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        border-radius: 12px;
        background-color: rgba(108, 92, 231, 0.86);
        color: #fff;
        font-size: 12px;
        font-weight: 700;
        line-height: 14px;
        letter-spacing: -0.6002039313px;
        cursor: pointer;
        transition: 0.3s ease;
        position: relative;
        gap: 8px;
    }

    .widget-input-download:hover {
        background-color: #a79df0;
    }

    .widget-input-download #message {
        z-index: 3;
    }

    .widget-input-download .quality {
        font-weight: 400;
    }

    .widget-card-list {
        padding-top: 20px;
        border-top: 1px solid rgba(178, 190, 195, 0.1019607843);
        list-style: none;
        padding-left: 0;
    }

    .widget-card-item {
        margin-bottom: 20px;
    }

    .widget-card-item:last-child {
        margin-bottom: 0;
    }

    .card-wrapper {
        width: 100%;
        border-radius: 24px;
    }

    .card-image {
        width: 210px;
        padding-bottom: 122px;
        background-image: url("https://images.unsplash.com/photo-1557683316-973673baf926?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60");
        background-size: cover;
        background-position: center;
        border-radius: 24px;
    }

    .card-main-content {
        display: flex;
        gap: 20px;
    }

    .card-content {
        padding-top: 10px;
        width: calc(100% - 243px);
    }

    .card-content-title {
        font-size: 14px;
        font-weight: 600;
        line-height: 17px;
        letter-spacing: 0px;
        color: #fff;
    }

    .card-content-url {
        margin-top: 10px;
        color: #6c5ce7;
        font-size: 8px;
        font-weight: 400;
        margin-bottom: 10px;
    }

    .card-content-button {
        margin-top: 20px;
    }

    .card-content-button .download-button {
        text-decoration: none;
        width: 100%;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        border-radius: 12px;
        background-color: rgba(108, 92, 231, 0.86);
        color: #fff;
        font-size: 12px;
        font-weight: 700;
        line-height: 14px;
        letter-spacing: -0.6002039313px;
        cursor: pointer;
        transition: 0.3s ease;
        position: relative;
        gap: 8px;
        overflow: hidden;
    }

    .card-content-button .download-button.error {
        color: #ff7d7e;
    }

    .card-content-button .download-button:hover {
        background-color: #a79df0;
    }

    .card-content-button .download-button-progress {
        height: 100%;
        width: 0;
        background: #6c5ce7;
        position: absolute;
        left: 0;
        z-index: 2;
        border-radius: 12px;
        transition: all 0.2s ease;
    }

    .card-content-button .download-button #message {
        z-index: 3;
    }

    .loader {
        display: none;
        color: #ffffff;
        font-size: 12px;
        text-indent: -9999em;
        margin: 10px;
        overflow: hidden;
        width: 1em;
        height: 1em;
        z-index: 4;
        border-radius: 50%;
        position: relative;
        transform: translateZ(0);
        animation: load6 1.7s infinite ease, round 1.7s infinite ease;
    }

    @keyframes load6 {
        0% {
            box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em,
                0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;
        }

        5%,
        95% {
            box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em,
                0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;
        }

        10%,
        59% {
            box-shadow: 0 -0.83em 0 -0.4em, -0.087em -0.825em 0 -0.42em,
                -0.173em -0.812em 0 -0.44em, -0.256em -0.789em 0 -0.46em,
                -0.297em -0.775em 0 -0.477em;
        }

        20% {
            box-shadow: 0 -0.83em 0 -0.4em, -0.338em -0.758em 0 -0.42em,
                -0.555em -0.617em 0 -0.44em, -0.671em -0.488em 0 -0.46em,
                -0.749em -0.34em 0 -0.477em;
        }

        38% {
            box-shadow: 0 -0.83em 0 -0.4em, -0.377em -0.74em 0 -0.42em,
                -0.645em -0.522em 0 -0.44em, -0.775em -0.297em 0 -0.46em,
                -0.82em -0.09em 0 -0.477em;
        }

        100% {
            box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em,
                0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;
        }
    }

    @keyframes round {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    @media screen and (max-width: 649px) {
        .widget-wrapper {
            width: 340px;
        }

        .card-main-content {
            flex-direction: column;
            width: 100% !important;
        }

        .card-wrapper .card-image {
            width: 100%;
            height: 168px;
            padding-bottom: 168px;
        }

        .card-wrapper .card-content {
            width: 100%;
        }
    }
</style>
</html>
